@echo off
::
:: Coverage batch file
:: Author:      Stephen Kloda
:: Date:        21 November 2019
:: Description:
::        Use the OpenCover and ReportGenerator NuGet packages to create coverage files for automated builds
::        ReportUnit optionally used for local unit test reports
::        This has been reworked to support .NET Core projects
::
setlocal
:: This gets the directory that this batch file lives in and assigns it to the startDir variable
for /f %%i in ("%0") do set startDir=%%~dpi
echo Starting in %startDir%
:: if the Configuration variable is set, then use it to find which folder holds the output files
if "%Configuration%" == "" (
	set Configuration=Debug
	echo Configuration property not present, setting to Debug
)

:: Always use BuildsDir env variable on a build server, so these values are set for local testing
if "%BuildsDir%" == "" (
	set CreateUnitTestReport=true
	set CoverageReportType=Html
) else (
	set CreateUnitTestReport=false
	set CoverageReportType=HtmlSummary
)
echo Create unit test report? %CreateUnitTestReport%

:: to move this to any other project, you'll hopefully only need to update the principleDll value, and maybe the namespaces excluded by the filter
set principleDll=TQ.Geocoding.API
:: this is the file generated by OpenCover
set coveragefile=%startDir%Reports\cover.xml
:: this is the file generated by nunit-console
set testResultsXml=%startDir%Reports\%principleDll%.UnitTests.xml
:: this is the HTML version of testResultsXml
set testResultsHtml=%startDir%Reports\%principleDll%.UnitTests.html
:: define variables for the dll files that contain the tests
set testsDll=%startDir%%principleDll%.Test\bin\%Configuration%\netcoreapp3.0\%principleDll%.Test.dll
echo Running tests for DLL %testsDll%

:: note that the following are version-specific, so if a version changes this will need to be reflected here
:: Nuget in .NET Core uses the '.nuget\packages' folder in the userprofile folder

:: set full paths to the tools we need - as the version numbers may change, use an evaluating expression

:: Open Cover is the main tool we need for generating a code coverage report
set openCover=%userprofile%\.nuget\packages\opencover\4.7.922\tools\OpenCover.Console.exe
echo Open Cover location: %openCover%
:: Report Generator takes the XML from OpenCover and turns it into nice HTML pages
set reportGenerator=%userprofile%\.nuget\packages\reportgenerator\4.3.6\tools\netcoreapp3.0\ReportGenerator.exe
echo Report Generator location: %reportGenerator%
:: ReportUnit (even though it's now officially deprecated) is an easy way of producing a nice HTML page for the actual unit test results
set unitTestReportTool=%userprofile%\.nuget\packages\reportunit\1.2.1\tools\ReportUnit.exe
echo Unit test report tool %unitTestReportTool%

:: remove the existing reports directory
if exist "%startDir%Reports" (
	echo Removing current reports directory.
	rd /s /q "%startDir%Reports"
	md Reports
) else (
    md Reports
)
echo.
:: create the coverage file
:: note that the filter definition works by including (+) or excluding (-) assemblys [] and namespaces within them (entry following [])
:: so "-[*]PetaPoco.*" means "exclude any namespaces beginning with "PetaPoco" in any of the assemblies"
:: excludebyattribute is a bit of a cheat as it means that we can remove untestable code from the coverage by adding
::   'using System.Diagnostics.CodeAnalysis' to a class and then [ExcludeFromCodeCoverage] to the appropriate method
:: excludebyfile is set as opencover wanted to parse the XAML file despite it not being proper code
:: also note that "-register:user" has been replaced with "-register:Path64" as this is not dependent on registry entries
"%opencover%" ^
 -target:"C:\Program Files\dotnet\dotnet.exe" ^
 -targetargs:"test --logger:nunit;LogFilePath=""%testResultsXml%""" ^
 -output:"%coveragefile%" ^
 -excludebyattribute:"System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverageAttribute" ^
 -filter:"+[%principleDll%]* +[TQ.Geocoding.Core]* +[TQ.Geocoding.Data]* -[%principleDll%.Test]* -[*]*.Properties.*" ^
 -register:user

:: turn the report file into a folder
"%reportGenerator%" -reports:"%coveragefile%" -targetdir:"%startDir%Reports" -reporttypes:%CoverageReportType%

if "%CreateUnitTestReport%" == "true" (
:: Jenkins can process the unit test reports, but if we're running locally we might still want to see them
	"%unitTestReportTool%" "%testResultsXml%" "%testResultsHtml%"
)

echo Done
endlocal